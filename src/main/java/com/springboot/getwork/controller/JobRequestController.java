package com.springboot.getwork.controller;

import java.util.List;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import com.springboot.getwork.model.LoginModel;
import com.springboot.getwork.model.Company;
import com.springboot.getwork.model.JobRequest;
import com.springboot.getwork.service.CompanyServiceImpl;
import com.springboot.getwork.service.JobRequestServiceImpl;

/**
 * @author Anthony
 *
 */
@RestController
@RequestMapping("/companies/jobrequests")
@CrossOrigin(value = "http://localhost:4200/")
public class JobRequestController {

    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private CompanyServiceImpl companyService;

    @Autowired
    private JobRequestServiceImpl jobRequestService;

    @PostMapping(value = "/{company_id}/create") // Map ONLY POST Requests
    public @ResponseBody String createJobRequest(@PathVariable("company_id") Integer company_id,@Valid @RequestBody JobRequest jobRequest) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request
        Company company = companyService.getCompanyInfo(company_id);
        jobRequest.setCompany(company);
        jobRequestService.createJobRequest(jobRequest);
        return "Saved job request";
    }

    @PostMapping(value = "/{company_id}/update") // Map ONLY POST Requests
    public @ResponseBody String updateJobRequest(@PathVariable("company_id") Integer company_id,@Valid @RequestBody JobRequest newJobRequest) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request
        Company company = companyService.getCompanyInfo(company_id);
        newJobRequest.setCompany(company);
        jobRequestService.updateJobRequest(newJobRequest);
        return "updated job request";
    }

    //
    @GetMapping(path = "/{company_id}/getAll")
    public @ResponseBody List<JobRequest> getAllJobRequests(@PathVariable("company_id") Integer company_id) {
        // This returns a JSON or XML with the user
        Company company = companyService.getCompanyInfo(company_id);
        return jobRequestService.getAllByCompanyId(company);
    }

    @GetMapping(path = "/{company_id}/search/{key}")
    public @ResponseBody List<JobRequest> search(@PathVariable("company_id") Integer company_id, @PathVariable("key") String key) {
        // This returns a JSON or XML with the users
        return jobRequestService.getJobRequestsByNumberOrStatus(key, company_id);
    }

}
