package com.springboot.getwork.controller;

import java.util.List;

import javax.validation.Valid;

import com.springboot.getwork.service.JobRequestService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import com.springboot.getwork.model.LoginModel;
import com.springboot.getwork.model.Company;
import com.springboot.getwork.model.JobRequest;
import com.springboot.getwork.model.Contract;
import com.springboot.getwork.service.CompanyServiceImpl;
import com.springboot.getwork.service.JobRequestServiceImpl;
import com.springboot.getwork.service.ContractServiceImpl;
import com.springboot.getwork.model.Contract.ContractStatus;
/**
 * @author Anthony
 *
 */
@RestController
@RequestMapping("/companies/jobrequests/contracts")
@CrossOrigin(value = "http://localhost:4200/")
public class ContractController {

    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private CompanyServiceImpl companyService;

    @Autowired
    private JobRequestServiceImpl jobRequestService;

    @Autowired
    private ContractServiceImpl contractService;

    @PostMapping(value = "/{jobrequest_id}/create") // Map ONLY POST Requests
    public @ResponseBody String createJobRequest(@PathVariable("jobrequest_id") Integer jobRequest_id, @Valid @RequestBody Contract contract) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request
        JobRequest jobRequest = jobRequestService.getJobRequestInfo(jobRequest_id);
        contract.setJobRequest(jobRequest);
        contractService.createContract(contract);
        return "Saved contract";
    }

    @PostMapping(value = "/{jobrequest_id}/update") // Map ONLY POST Requests
    public @ResponseBody String updateContract(@PathVariable("jobrequest_id") Integer jobrequest_id,@Valid @RequestBody Contract newContract) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request
        JobRequest jobRequest = jobRequestService.getJobRequestInfo(jobrequest_id);
        newContract.setJobRequest(jobRequest);
        contractService.createContract(newContract);
        return "updated contract";
    }
    //
    @GetMapping(path = "/{company_id}/{jobRequest_id}/getAll")
    public @ResponseBody List<Contract> getAllContracts(@PathVariable("jobRequest_id") Integer jobRequest_id) {
        // This returns a JSON or XML with the user
        JobRequest jobRequest = jobRequestService.getJobRequestInfo(jobRequest_id);
        return contractService.getAllByJobRequestId(jobRequest);
    }

    @GetMapping(path = "/{company_id}/{jobrequest_id}/search/{key}")
    public @ResponseBody List<Contract> search(@PathVariable("jobrequest_id") Integer jobRequest_id, @PathVariable("key") String key) {
        // This returns a JSON or XML with the users
        ContractStatus statusKey = null;
        try{
            statusKey = ContractStatus.valueOf(key);
        }catch(Exception e){

        }
        return contractService.getContractsByNumberOrStatus(key, statusKey, jobRequest_id);
    }

}
